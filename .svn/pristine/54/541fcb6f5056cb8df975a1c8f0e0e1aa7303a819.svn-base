<template>
  <div ref="win" class="whole-order flex">
    <Spin style="margin:auto;" v-if="loading" size="large"></Spin>
    <Row v-else>
        <p class="padding16-18" style="background:white;font-size:18px;font-weight:600;color:#000">{{title}}</p>
        <Card>
            <p slot="title">订单分析-整体订单</p>
            <Table :width="tableWidth" border :columns="columns_1" :data="data_1"></Table>
        </Card>
        <Card>
            <p slot="title">订单分析-销售数量款色TOP10</p>
            <Table :width="tableWidth" border :columns="columns_2" :data="data_2"></Table>
        </Card>
        <Card>
            <p slot="title">订单分析-销售金额款色TOP10</p>
            <Table :width="tableWidth" border :columns="columns_3" :data="data_3"></Table>
        </Card>
        <Card>
            <p slot="title">订单分析-销售品类Top10</p>
            <Table :width="tableWidth" border :columns="columns_4" :data="data_4"></Table>
        </Card>
        <!-- <Col class="padding16-18 flex" span="24">
            <div id="main1" style="width: 370px;height:370px;"></div>
            <div id="main2" style="width: 370px;height:370px;"></div>
        </Col> -->
    </Row>
  </div>
</template>
<script>
    export default {
        name: 'whole-order',
        data() {
            return {
                columns_1: [],
                columns_2: [],
                columns_3: [],
                columns_4: [],
                data_1: [],
                data_2: [],
                data_3: [],
                data_4: [],
                gaugeWidth: 0,
                tableWidth: 0
            };
        },
        props: {
            title: {
                type: String,
                required: true
            },
            allData: {
                type: Array,
                required: true
            },
            loading: {
                type: Boolean,
                default: false
            }
        },
        created() {
            console.log(this.allData);
            this.columns_1 = [
                {
                    title: '对比任务名称',
                    key: 'display_name',
                    align: 'center',
                    width: 150
                },
                {
                    title: '总销售额',
                    key: 'sales_amount',
                    align: 'center',
                    width: 150
                },
                {
                    title: '平均客单价',
                    key: 'avg_transaction_value',
                    align: 'center',
                    width: 150
                },
                {
                    title: '平均客单件',
                    key: 'avg_transaction_unit',
                    align: 'center',
                    width: 150
                },
                {
                    title: '平均件单价',
                    key: 'avg_unit_value',
                    align: 'center',
                    width: 150
                },
                {
                    title: '联单率',
                    key: 'joint_purchase_rate',
                    align: 'center',
                    width: 150
                },
                {
                    title: '平均折扣率',
                    key: 'joint3_purchase_scale',
                    align: 'center',
                    width: 150
                },
                {
                    title: '新会员人数',
                    key: 'vip_order_scale',
                    align: 'center',
                    width: 150
                },
                {
                    title: '新会员转化率',
                    key: 'vip_sales_scale',
                    align: 'center',
                    width: 150
                },
                {
                    title: '新会员占比',
                    key: 'new_vip_count',
                    align: 'center',
                    width: 150
                },
                {
                    title: '老会员人数',
                    key: 'new_vip_case_rate',
                    align: 'center',
                    width: 150
                }
            ];
            this.columns_2 = [{
                title: '对比任务名称', key: 'display_name', align: 'center', width: 180
            }];
            this.columns_3 = [{
                title: '对比任务名称', key: 'display_name', align: 'center', width: 180
            }];
            this.columns_4 = [{
                title: '对比任务名称', key: 'display_name', align: 'center', width: 180
            }];
            for (let i = 1; i <= 10; i++) {
                this.columns_2.push({
                    title: `Top${i}`, key: `top${i}`, minWidth: 200, align: 'center'
                });
                this.columns_3.push({
                    title: `Top${i}`, key: `top${i}`, minWidth: 200, align: 'center'
                });
                this.columns_4.push({
                    title: `Top${i}`, key: `top${i}`, minWidth: 200, align: 'center'
                });
            }

            // 表格数据
            this.allData.forEach((item, index) => {
                this.data_2[index] = { display_name: item.display_name };
                item.top10_by_unit.forEach((item_2, index_2) => {
                    this.data_2[index][`top${+index_2 + 1}`] = Object.keys(item_2)[0];
                });
                this.data_3[index] = { display_name: item.display_name };
                item.top10_by_value.forEach((item_2, index_2) => {
                    this.data_3[index][`top${+index_2 + 1}`] = Object.keys(item_2)[0];
                });
                this.data_4[index] = { display_name: item.display_name };
                item.category_distribution.forEach((item_2, index_2) => {
                    if (index_2 > 10) return;
                    this.data_4[index][`top${+index_2 + 1}`] = Object.keys(item_2)[0];
                });
            });


            this.data_1 = this.allData.map(item => ({
                display_name: item.display_name,
                sales_amount: item.sales_amount,
                avg_transaction_value: item.avg_transaction_value,
                avg_transaction_unit: item.avg_transaction_unit,
                avg_unit_value: item.avg_unit_value,
                joint_purchase_rate: item.joint_purchase_rate,
                joint3_purchase_scale: item.joint3_purchase_scale,
                vip_order_scale: item.vip_order_scale,
                vip_sales_scale: item.vip_sales_scale,
                new_vip_count: item.new_vip_count,
                new_vip_case_rate: item.new_vip_case_rate
            }));

            // this.data_4 = this.allData.map((item,index)=> {
            // return item.Joint5_purchase_scale.map( item_2 => Object.keys(item_2)[0] )
            // }
        },

        mounted() {
            this.gaugeWidth = this.$refs.win.clientWidth;
            this.tableWidth = this.gaugeWidth;


            const myChart1 = this.echarts.init(document.getElementById('main1'));
            const myChart2 = this.echarts.init(document.getElementById('main2'));
            const option1 = {
                series: [
                    {
                        name: '业务指标',
                        type: 'gauge',
                        // radius: '100%', // 仪表盘的百分比
                        detail: { formatter: '{value}%' },
                        data: [{ value: 50, name: '退货率' }]
                    }
                ]
            };
            myChart1.setOption(option1);
            myChart2.setOption(option1);
        },
        methods: {}
    };
</script>
<style lang="less" scoped>
.whole-order{
    min-height: 400px;
}
</style>
